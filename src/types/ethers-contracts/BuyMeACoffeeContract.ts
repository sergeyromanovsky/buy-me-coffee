/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace BuyMeACoffee {
  export type MemoStruct = {
    from: PromiseOrValue<string>;
    timestamp: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    message: PromiseOrValue<string>;
  };

  export type MemoStructOutput = [string, BigNumber, string, string] & {
    from: string;
    timestamp: BigNumber;
    name: string;
    message: string;
  };
}

export interface BuyMeACoffeeContractInterface extends utils.Interface {
  functions: {
    "buyCoffee(string,string)": FunctionFragment;
    "getMemos()": FunctionFragment;
    "withdrawTips()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "buyCoffee" | "getMemos" | "withdrawTips"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyCoffee",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getMemos", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawTips",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "buyCoffee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMemos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTips",
    data: BytesLike
  ): Result;

  events: {
    "NewMemo(tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewMemo"): EventFragment;
}

export interface NewMemoEventObject {
  arg0: BuyMeACoffee.MemoStructOutput;
}
export type NewMemoEvent = TypedEvent<
  [BuyMeACoffee.MemoStructOutput],
  NewMemoEventObject
>;

export type NewMemoEventFilter = TypedEventFilter<NewMemoEvent>;

export interface BuyMeACoffeeContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BuyMeACoffeeContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyCoffee(
      name: PromiseOrValue<string>,
      message: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getMemos(
      overrides?: CallOverrides
    ): Promise<[BuyMeACoffee.MemoStructOutput[]]>;

    withdrawTips(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  buyCoffee(
    name: PromiseOrValue<string>,
    message: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getMemos(overrides?: CallOverrides): Promise<BuyMeACoffee.MemoStructOutput[]>;

  withdrawTips(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyCoffee(
      name: PromiseOrValue<string>,
      message: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getMemos(
      overrides?: CallOverrides
    ): Promise<BuyMeACoffee.MemoStructOutput[]>;

    withdrawTips(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "NewMemo(tuple)"(arg0?: null): NewMemoEventFilter;
    NewMemo(arg0?: null): NewMemoEventFilter;
  };

  estimateGas: {
    buyCoffee(
      name: PromiseOrValue<string>,
      message: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getMemos(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawTips(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyCoffee(
      name: PromiseOrValue<string>,
      message: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getMemos(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawTips(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
